# js basics -- random notes

## IMPORTANT

âš¡ Remember you've got his (Wes) eslint config, so there's some stuff that'll happen automatically (and/or errors that may get thrown) that aren't native JS.

## Anyway

"emmet" extension/abbreviation, magics a simple HTML file:
vscode > type "html:5" then "enter"

## variables basics

### variable declarations
var thing = 'alison';
let age = 90;
const cool = true;
    var and let can be updated -- just don't use the (what I'm calling) prefix if you update it. For example, later in my script I could do:
    var thing = 'alison jo';
    I would not do:
    var thing = 'alison jo';
    (it might "work" but it's bad)

    const can't be changed -- the following line would throw an error:
    cool = false;

    when you set a const variable, you MUST set a value -- the following line would throw a syntax error "missing = in const declaration":
    const something;

    let and const are new to JS as of es6 (?!)

    Wes very rarely uses var variables.
        usually he uses const
        uses let sometimes

variable names must start with letters, underscores, dollar signs
    can contain ^^ these characters, and numbers
    *no hyphens*

    TYPICALLY, you don't start variables with _ or $ because they're associated with (lowdash?) and jquery, respectively (you can, but it would be weird).

### data types

SNOB'N'US
    ha ha ha useless mnemonic
anyway, mostly familiar to me BUT:
    String, Number, Object, Boolean
    Null
    Undefined, Symbol

pro tip: use typeof in dev tools to inspect variables on the fly
  i.e. open the CD Demo homepage > dev tools > Console, and do:
  typeof global_slider_count
  it'll output "number"

## functions

"garbage collection" is the thing where variables that only exist inside a function get cleaned-up.

## misc eslint

### disabling/enabling within a file

See examples in...
- some.js "eslint-disable-next-line"
- types_*.js files "eslint-disable" at top to disable eslint entirely for each of these files
- types_strings.js "eslint-enable" near the end (commented out, actually) (not sure if there's an "eslint-enable-next-line", haven't tried)
- variables.html "eslint-disable prefer-const" example for "entire file" (so to speak)

## misc

strict mode: brief explanation is simply that it forces some best practices
    not worrying about it, b/c it's forced by modules and that's the modern way to do JS so, effectively, we'll be forced into strict mode anyway.
    In theory, enabling strict mode is putting this line at the top of your script:
    'use strict';
